/*
LibAndria version 4
A C-based general purpose utility library.
Copyright (c) 2024 Jared A. Maddox

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

This grant of rights is subject to two conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

And:

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/



#include <stdio.h>

#include "???/monads.h"



/* Note: rewrite things a bit so that the aux data in the refcounter type */
/*  is specifically a virtual table that implements various I/O functions, */
/*  including deletion. Also, the bi-tuplic monad should be used to allow */
/*  various operations to swap refcounter pointers in and out for e.g. */
/*  composite streams, iterators over text ropes, etc. */
/* TODO: */
	/* Complete libandria4_FILE_tracker_redirect() */
	
	typedef struct libandria4_FILE_substream_vtable libandria4_FILE_substream_vtable;
	
	
		/* libandria4_FILE_handle{} probably never had any users, */
		/*  but just in case there were, it's now named */
		/*  libandria4_FILE_tracker{}. */
	LIBANDRIA4_MONAD_REFPOINTER_DEFINE_WRAPPEDDECL(
			libandria4_FILE_tracker,
				libandria4_FILE_substream_vtable*
		);
		/* libandria4_FILE_substream used to be named libandria4_FILE_file. */
	typedef libandria4_FILE_tracker_counttype libandria4_FILE_substream;
	
	
		/* EOF is 0, because EOF isn't really an error, and ( error * 0 ) */
		/*  should obviously be no error at all. */
	typedef uintptr_t libandria4_newstreams_err;
	LIBANDRIA4_MONAD_EITHER_BUILDTYPE(
		libandria4_newstreams_result1,
			size_t,
			libandria4_newstreams_err
	);
	LIBANDRIA4_MONAD_MAYBE_BUILDTYPE(
		libandria4_newstreams_result2,
			libandria4_newstreams_err
	);
	LIBANDRIA4_MONAD_EITHER_BUILDTYPE(
		libandria4_newstreams_result3,
			char,
			libandria4_newstreams_err
	);
	LIBANDRIA4_MONAD_EITHER_BUILDTYPE(
		libandria4_newstreams_result4,
			intmax_t,
			libandria4_newstreams_err
	);
	
	LIBANDRIA4_MONAD_BITUPLIC_BUILDTYPE(
		libandria4_newstreams_bituplic1,
			libandria4_newstreams_result1,
			libandria4_FILE_substream*
	);
	LIBANDRIA4_MONAD_BITUPLIC_BUILDTYPE(
		libandria4_newstreams_bituplic2,
			libandria4_newstreams_result2,
			libandria4_FILE_substream*
	);
	LIBANDRIA4_MONAD_BITUPLIC_BUILDTYPE(
		libandria4_newstreams_bituplic3,
			libandria4_newstreams_result3,
			libandria4_FILE_substream*
	);
	LIBANDRIA4_MONAD_BITUPLIC_BUILDTYPE(
		libandria4_newstreams_bituplic4,
			libandria4_newstreams_result4,
			libandria4_FILE_substream*
	);
	
	
	
	/* Things that won't be supported: */
		/* Directories */
			/* That's another layer's job. */
		/* char* setlocale (int category, const char* locale); */
			/* Need three wrappers, two providing default behaviors ("C" verses system-current). */
		/* string.h */
			/* Need LOTS of wrappers. */
		/*
				void* bsearch
				(
					const void* key, const void* base,
					size_t num, size_t size,
					int (*compar)(const void*,const void*)
				);
			and
				void qsort
				(
					void* base, size_t num, size_t size,
					int (*compar)(const void*,const void*)
				);
		*/
			/* Only noted because I need to make a wrapper... elsewhere. */
		/*
				char* asctime( const struct tm * timeptr );
			and
				char* ctime( const time_t * timer );
			and
				size_t strftime( char* ptr, size_t maxsize, const char* format,  const struct tm* timeptr );
		*/
			/* Only noted because I need to make a wrapper... elsewhere. */
		/* char* getenv (const char* name); */
			/* Only noted because I need to make a wrapper... elsewhere. */
		/* FILE * fopen ( const char * filename, const char * mode ); */
			/* That's another layer's job. */
		/* int remove ( const char * filename ); */
			/* That's another layer's job. */
		/* int rename ( const char * oldname, const char * newname ); */
			/* That's another layer's job. */
		/* FILE * tmpfile ( void ); */
			/* That's another layer's job. */
		/* char * tmpnam ( char * str ); */
			/* That's another layer's job. */
		/* void setbuf ( FILE * stream, char * buffer ); & friend(s). */
			/* "Somebody else's problem", aka "make the caller do it". */
		/* int ungetc ( int character, FILE * stream ); */
			/* As setbuf(), but probably a wrapper in specific. */
	struct libandria4_FILE_substream_vtable
	{
		/* printf() will be supported by discrete external function: it's a big job, */
		/*  and should only been done once. Same for scanf(). */
		
		int (*is_eof)( void* /* FILE* */ );
			/* If there isn't an error, then it MIGHT still indicate eof. */
		libandria4_newstreams_result2 (*get_error)( void* /* FILE* */ );
		
		libandria4_newstreams_bituplic2 (*clear_err)( void* /* FILE* */ );
		
		
			/* For "Reference point" use SEEK_SET, SEEK_CUR, or SEEK_END, all from stdio.h */
		libandria4_newstreams_bituplic4 (*tell)( void* /* FILE* */, int /* Reference point. */ );
		libandria4_newstreams_bituplic2 (*seek)( void* /* FILE* */, intmax_t, int /* Reference point. */ );
		
		libandria4_newstreams_bituplic2 (*reopen)( void* /* FILE* */,  char* /* name */, char* /* mode */ );
		libandria4_newstreams_bituplic2 (*rewind)( void* /* FILE* */ );
		
		libandria4_newstreams_bituplic2 (*flush)( void* /* FILE* */ );
		
		
		libandria4_newstreams_bituplic3 (*get_c)( void* /* FILE* */ );
		libandria4_newstreams_bituplic1 (*put_c)( void* /* FILE* */, char );
		
		libandria4_newstreams_bituplic1
			(*get_s)
			( void* /* FILE* */, /* pascalarray< char >* */, size_t /* offset */ );
		libandria4_newstreams_bituplic1
			(*put_s)
			( void* /* FILE* */, /* pascalarray< char >* */, size_t /* offset */ );
		
		libandria4_newstreams_bituplic1
			(*block_read)
			( void* /* FILE* */, void* /* buffer */, size_t /* size */, size_t /* count */ );
		libandria4_newstreams_bituplic1
			(*block_write)
			( void* /* FILE* */, void* /* buffer */, size_t /* size */, size_t /* count */ );
		
		libandria4_newstreams_bituplic2 (*close)( void* /* FILE* */ );
	};
	static libandria4_FILE_substream_vtable lib4_FILE_vtab;
	
	
		/* The ondie handler is vitally important, and needs to interplay with */
		/*  the rest of this system. See libandria4_FILE_tracker_initialize()'s */
		/*  note. */
		/* Note that we SHOULD give this a better name later. */
		/* The first argument will be ->aux, the second will be ->data, but */
		/*  we're storing the FILE pointer in aux and the virtual table in val, */
		/*  so this is actually correct. */
	#define LIBANDRIA4_NEWSTREAMS_ONDIE( file_p, vtab_p ) \
		( ( ( vtab_p ) && (vtab_p)->close ) \
			? (vtab_p)->close( (file_p) ) \
			: LIBANDRIA4_MONAD_BITUPLIC_BUILDJUSTBOTH( \
					libandria4_newstreams_bituplic2, \
						LIBANDRIA4_MONAD_MAYBE_BUILDJUST( \
								libandria4_newstreams_result2, \
								libandria4_newstreams_err, \
								val \
							) \
						libandria4_newstreams_result2, \
						libandria4_FILE_substream*, \
						vala, valb \
				) )
		/* We want to just use malloc() & friends. */
	LIBANDRIA4_MONAD_REFPOINTER_COMMONIMPL(
			libandria4_FILE_tracker,
				libandria4_FILE_substream_vtable*,
				
				LIBANDRIA4_NEWSTREAMS_ONDIE
		);
	
	
	
		/* Complete. Note that THE POINTER ITSELF is null. */
	int libandria4_FILE_tracker_initialize_null( libandria4_FILE_tracker *trk )
	{
		if( trk )
		{
			return( LIBANDRIA4_MONAD_REFPOINTER_EXPRINIT_NULL( libandria4_FILE_tracker, *trk ) );
		}
		
		return( -1 );
	}
	static void libandria4_FILE_tracker_initialize_badalloc
	(
		void*, /* "this" pointer. */
		
		libandria4_FILE_tracker_counttype**,
			libandria4_FILE_substream_vtable*,
			void* /* FILE* */
	)
	{
		/* Do nothing, but we REALLY SHOULD log an error. */
		
		return;
	}
		/* Complete? */
	int libandria4_FILE_tracker_initialize( libandria4_FILE_tracker *trk,  FILE *f )
	{
		if( trk )
		{
			if( !libandria4_FILE_tracker_initialize_null( trk ) )
			{
				return( -2 );
			}
	/* Signature:  void (*onfull)( libandria4_FILE_file**,  FILE*, void* /* aux */ ) */
#define libandria4_FILE_tracker_initialize_ONFULL( ctr_ptr, vtab_ptr, f_p ) \
	( ( (vtab_ptr) != &lib4_FILE_vtab ? return( -3 ) : 1 ) \
		, ( (f_p) != f ? return( -4 ) : 1 ) \
		, return( 2 ) )
			
			static void *badalloc_data = (void*)0;
			LIBANDRIA4_MONAD_REFPOINTER_WRAPPED_BODYINIT(
				libandria4_FILE_tracker, *trk, &lib4_FILE_vtab, (void*)f,
				libandria4_FILE_tracker_initialize_ONFULL,
				libandria4_FILE_tracker_initialize_badalloc, badalloc_data );
			
			return( 1 );
		}
		
		return( -1 );
	}
		/* The "event handlers" need to be set. */
	int libandria4_FILE_tracker_redirect( libandria4_FILE_tracker *tracker, libandria4_FILE_tracker *donor )
	{
		if( tracker & donor )
		{
			LIBANDRIA4_MONAD_REFPOINTER_WRAPPED_BODYSET(
				libandria4_FILE_tracker, var, valptr,
						/* These five need to actually be set to something. */
					??? failneglect, failattend, succneglect, succattend, ondead ???
			);
			
			return( 1 );
		}
		
		return( -1 );
	}
		/* This looks complete? */
		/* Complete, but pointless. Build some more-proper wrappers. */
	int libandria4_FILE_tracker_apply
	(
		libandria4_FILE_tracker *trk,
		int *res,
		
			/* The argument in the va_list* will be the relevant FILE*. */
		int (*operation)( void*, va_list* ),
		void *op_data,
		
			/* The argument in the va_list* will be the provided */
			/*  libandria4_FILE_tracker{} BY VALUE. */
		int (*on_null)( void*, va_list* ),
		void *null_data
	)
	{
		if( trk && operation && on_null )
		{
				/* The value of "a" just doesn't matter. */
			int a;
			libandria4_op_indirfunc_int_voidp_valist_data functor1, functor2;
			int (*LIBANDRIA4_OP_runable1)( void *dat_, ... ) =
				&libandria4_op_indirfunc_int_voidp;
			int (*LIBANDRIA4_OP_runable2)( void *dat_, ... ) =
				&libandria4_op_indirfunc_int_voidp;
			void *LIBANDRIA4_OP_runabledata1, *LIBANDRIA4_OP_runabledata2;
			
			LIBANDRIA4_OP_runabledata1 = (void*)&functor1;
			functor1.func = operation;
			functor1.data = op_data;
			
			LIBANDRIA4_OP_runabledata2 = (void*)&functor2;
			functor2.func = on_null;
			functor2.data = null_data;
			
			
			int res_ =
				LIBANDRIA4_MONAD_REFPOINTER_EXPRAPPLY(
					*trk,
						LIBANDRIA4_OP_RUNifABLE1_ELSEa,
						LIBANDRIA4_OP_RUNifABLE2_ELSEa
				);
			if( res )
			{
				*res = res_;
			}
			
			
			return( 1 );
		}
		
		return( -1 );
	}
		/* Is this complete? Are those LIBANDRIA4_NULL_MACRO references both appropriate? */
	int libandria4_FILE_tracker_deinitialize
	(
		libandria4_FILE_tracker *trk,
		
		/* Both of these function pointers can be null if desired. */
			/* Just ignore the va_list*, there won't be any provided arguments. */
		void (*on_failedrelease)( void*, va_list* ),
		void *failedrelease_data
	)
	{
		if( trk )
		{
				/* The value of "a" just doesn't matter. */
			int a;
			libandria4_op_indirfunc_int_voidp_valist_data functor1, functor2;
			int (*LIBANDRIA4_OP_runable1)( void *dat_, ... ) =
				&libandria4_op_indirfunc_int_voidp;
			int (*LIBANDRIA4_OP_runable2)( void *dat_, ... ) =
				&libandria4_op_indirfunc_int_voidp;
			void *LIBANDRIA4_OP_runabledata1, *LIBANDRIA4_OP_runabledata2;
			
			LIBANDRIA4_OP_runabledata1 = (void*)&functor1;
			functor1.func = on_failedrelease;
			functor1.data = failedrelease_data;
			
			LIBANDRIA4_MONAD_REFPOINTER_WRAPPED_BODYDEINIT
			(
				libandria4_FILE_tracker, *trk,
					LIBANDRIA4_OP_RUNifABLE1_ELSEa, /* failneglect */
					LIBANDRIA4_NULL_MACRO, /* succneglect */
					LIBANDRIA4_NULL_MACRO /* ondead */
			);
			
			return( 1 );
		}
		
		return( -1 );
	}
	LIBANDRIA4_MONAD_REFPOINTER_DEFINE_WRAPPEDDECL(
		libandria4_FILE_tracker,
			libandria4_FILE_substream_vtable*
	);






	int libandria4_FILE_tracker_apply
	(
		libandria4_FILE_tracker *trk,
		int *res,
		
			/* The argument in the va_list* will be the relevant FILE*. */
		int (*operation)( void*, va_list* ),
		void *op_data,
		
			/* The argument in the va_list* will be the provided */
			/*  libandria4_FILE_tracker{} BY VALUE. */
		int (*on_null)( void*, va_list* ),
		void *null_data
	)
	{
		if( trk && operation && on_null )
		{
				/* The value of "a" just doesn't matter. */
			int a;
			libandria4_op_indirfunc_int_voidp_valist_data functor1, functor2;
			int (*LIBANDRIA4_OP_runable1)( void *dat_, ... ) =
				&libandria4_op_indirfunc_int_voidp;
			int (*LIBANDRIA4_OP_runable2)( void *dat_, ... ) =
				&libandria4_op_indirfunc_int_voidp;
			void *LIBANDRIA4_OP_runabledata1, *LIBANDRIA4_OP_runabledata2;
			
			LIBANDRIA4_OP_runabledata1 = (void*)&functor1;
			functor1.func = operation;
			functor1.data = op_data;
			
			LIBANDRIA4_OP_runabledata2 = (void*)&functor2;
			functor2.func = on_null;
			functor2.data = null_data;
			
			
			int res_ =
				LIBANDRIA4_MONAD_REFPOINTER_EXPRAPPLY(
					*trk,
						LIBANDRIA4_OP_RUNifABLE1_ELSEa,
						LIBANDRIA4_OP_RUNifABLE2_ELSEa
				);
			if( res )
			{
				*res = res_;
			}
			
			
			return( 1 );
		}
		
		return( -1 );
	}






	static int libandria4_FILE_tracker_feof( void *f )
	{
		return( feof( (FILE*)f ) );
	}
	static libandria4_newstreams_result2 libandria4_FILE_tracker_geterror( void *f )
	{
		int res = ferror( (FILE*)f );
		
		???
	}
	static libandria4_newstreams_bituplic2 libandria4_FILE_tracker_clearerr( void *f )
	{
		void clearerr( (FILE*)f );
		
		???
	}
	
	static libandria4_newstreams_bituplic4 libandria4_FILE_tracker_tell( void* f, int refpt )
	{
		if( refpt != SEEK_SET )
		{
			???
		}
		
		long ftell( (FILE*)f );
		
		???
	}
	static libandria4_newstreams_bituplic4 libandria4_FILE_tracker_seek( void* f, intmax_t off, int refpt )
	{
		if( off > LONG_MAX )
		{
			???
		}
		switch( refpt )
		{
			case SEEK_SET:   case SEEK_CUR:   case SEEK_END:
				break;
			default:
				???
		}
		
		int fseek( (FILE*)f, off, refpt );
		
		???
	}
	
	static libandria4_newstreams_bituplic2 libandria4_FILE_tracker_reopen( void* f,  char* name, char* mode )
	{
		FILE *freopen( const char *restrict filename, const char *restrict mode,
               FILE *restrict stream );
		
		errno_t freopen_s( FILE *restrict *restrict newstreamptr,
                   const char *restrict filename, const char *restrict mode,
                   FILE *restrict stream );
		
		???
	}
	static libandria4_newstreams_bituplic2 libandria4_FILE_tracker_rewind( void* f )
	{
		void rewind( (FILE*)f );
		
		???
	}
	
	static libandria4_newstreams_bituplic2 libandria4_FILE_tracker_flush( void* f )
	{
		int fflush( (FILE*)f );
		
		???
	}
	
	static libandria4_newstreams_bituplic3 libandria4_FILE_tracker_getc( void* f )
	{
		int fgetc( (FILE*)f );
		
		???
	}
	static libandria4_newstreams_bituplic1 libandria4_FILE_tracker_putc( void* f, char ch )
	{
		int fputc( ch, (FILE*)f );
		
		???
	}
	
	static libandria4_newstreams_bituplic1 libandria4_FILE_tracker_gets
		( void* (FILE*), /* pascalarray< char >* */, size_t offset )
	{
		/* Read "manually". */
		
		???
	}
	static libandria4_newstreams_bituplic1 libandria4_FILE_tracker_puts
		( void* (FILE*), /* pascalarray< char >* */, size_t offset )
	{
		/* Write "manually". */
		
		???
	}
	
	static libandria4_newstreams_bituplic1 libandria4_FILE_tracker_block_read
		( void* f, void* buffer, size_t size, size_t count )
	{
		size_t fread( buffer, size, count, (FILE*)f );
		
		???
	}
	static libandria4_newstreams_bituplic1 libandria4_FILE_tracker_block_write
		( void* f, void* buffer, size_t size, size_t count )
	{
		size_t fwrite( buffer, size, count, (FILE*)f );
		
		???
	}
	
	static libandria4_newstreams_bituplic2 libandria4_FILE_tracker_close( void* f )
	{
		int fclose( (FILE*)f );
		
		???
	}
	static libandria4_FILE_substream_vtable lib4_FILE_vtab =
	{
		&libandria4_FILE_tracker_feof,
			/* If there isn't an error, then it MIGHT still indicate eof. */
		&libandria4_FILE_tracker_geterror,
		
		&libandria4_FILE_tracker_clearerr,
		
		
		&libandria4_FILE_tracker_tell,
		&libandria4_FILE_tracker_seek,
		
		&libandria4_FILE_tracker_reopen,
		&libandria4_FILE_tracker_rewind,
		
		&libandria4_FILE_tracker_flush,
		
		
		&libandria4_FILE_tracker_getc,
		&libandria4_FILE_tracker_putc,
		
		&libandria4_FILE_tracker_gets,
		&libandria4_FILE_tracker_puts,
		
		&libandria4_FILE_tracker_block_read,
		&libandria4_FILE_tracker_block_write,
		
		&libandria4_FILE_tracker_close
	};






