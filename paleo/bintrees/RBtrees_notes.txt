/*
LibAndria version 4
A C-based general purpose utility library.
Copyright (c) 2024 Jared A. Maddox

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

This grant of rights is subject to two conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

And:

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/



About:
	This file should be mostly done. It deeply needs to be tested, especially
the deletion code. I worry that the double-rotate in particular may cause
problems by breaking the tracking of the parent->grandparent transition, but I
just don't know. Fortunately, there is a verify function, so all that's really
needed is some code that uses it all.
	Use math/heapsalgo.h to improve the testing stuff.



Red-black trees:
	Based on Eternally Confuzzled / Julienne Walker's code, search on the Wayback Machine around Feburary of 2018.
	The red+black height can be unpredictable, but the black height is always the same between root and all leaves...
		EXCEPT during insertion and deletion, when it will ONLY be off by 1 in either direction, and during which we
		can ALWAYS know WHERE the imbalance is.
	Red violations:
		Insertion:
		Deletion:
	Added black:
		Carry positive black down the tree until it can be "legally" turned into a red.
	Deleted black:
		Carry negative black down the tree until a red can be "legally" turned into a black.
	Non-black root:
		Color root black.
	;
	ERROR!!! "name" is treated as both the head of all func/type/etc. identifiers, AND the node-type: THIS SHOULD NOT BE!
	
	
	
	
	
	
		LIBANDRIA4_MONAD_EITHER_BUILDTYPE( name ## _eitherrnodptr, unsigned, (name)* );
			
			( name ## _eitherrnodptr ) ( name ## _eitherrnodptr_err )( unsigned err )
				{ return( LIBANDRIA4_MONAD_EITHER_BUILDLEFT( name ## _eitherrnodptr, unsigned, err ) ); }
			
			( name ## _eitherrnodptr ) ( name ## _eitherrnodptr_nodeptr )( (name) *ptr )
				{ return( LIBANDRIA4_MONAD_EITHER_BUILDRIGHT( name ## _eitherrnodptr, (name)*, ptr ) ); }
	
	
	
	/* The libandria4_doubleint{} type is from commontypes.h . */
	
	#define LIBANDRIA4_RBTREES_REDCHILDREN( name,  macroset ) \
		libandria4_doubleint ( name ## _redchildren )( (name) *parent ) { \
			if( !parent ) { return( libandria4_doubleint_build( -1, -1 ) ); } \
			\
			( name ## _bitup ) res; \
			(name) *left = 0, *right = 0, *a; \
			libandria4_commonio_err e = 0, d = 0; \
			\
			res = macroset ## _GETLEFT( parent ); \
			LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
				res, \
					LIBANDRIA4_OP_SETe, \
					LIBANDRIA4_OP_SETa, \
					LIBANDRIA4_OP_SETd ); \
				if( e ) { return( libandria4_doubleint_build( -e, -1 ) ); } \
				if( d ) { return( libandria4_doubleint_build( -2, -1 ) ); } \
				left = a; \
			\
			res = macroset ## _GETRIGHT( parent ); \
			LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
				res, \
					LIBANDRIA4_OP_SETe, \
					LIBANDRIA4_OP_SETa, \
					LIBANDRIA4_OP_SETd ); \
				if( e ) { return( libandria4_doubleint_build( -1, -e ) ); } \
				if( d ) { return( libandria4_doubleint_build( -1, -2 ) ); } \
				right = a; \
			\
			return( \
				libandria4_doubleint_build( \
					LIBANDRIA4_RBTREES_ISRED( left ), LIBANDRIA4_RBTREES_ISRED( right ) ) ); }
	
	
	
	/* The code below is in various ways wrong. It accesses colors directly, doesn't have error code filled, etc. Fix before using. */
	
	#define LIBANDRIA4_RBTREES_ISRED( macroset,  nodeptr ) ( ( !!(nodeptr) ) ? ( (nodeptr)->is_red ? 1 : 0 ) : 0 )
	#define LIBANDRIA4_RBTREES_SETRED( macroset,  nodeptr ) ( ( !!(nodeptr) ) ? ( (nodeptr)->is_red = 1, 1 ) : 0 )
	#define LIBANDRIA4_RBTREES_SETBLACK( macroset,  nodeptr ) ( ( !!(nodeptr) ) ? ( (nodeptr)->is_red = 0, 1 ) : 0 )
		/* Note that this should return a double-pointer, not a normal single-pointer. */
		/* Styled after eternally-confuzzled's (Julienne Walker's) approach. */
		/* Actually, this returns a bi-tuplic. So, the bi-tuplic needs to provide a double-pointer. */
	#define LIBANDRIA4_RBTREES_FETCHCHILD( head, nodetype, macroset,  nodeptr, dir, on_badrange, on_null ) \
		( ( !!(nodeptr) ) ? \
			( (dir) == 0 ? \
				( macroset ## GETLEFT( head, nodetype, nodeptr ) ) : \
				( (dir) > 0 ? ( macroset ## GETRIGHT( head, nodetype, nodeptr ) ) : \
					(on_badrange( (nodeptr), (dir) )) ) ) : \
			(on_null( (nodeptr) )) )
		/* Also returns a bi-tuplic. */
	#define LIBANDRIA4_RBTREES_SETCHILD( baseptr, dir,  valvar,  on_badrange, on_null ) \
		( ( !!(baseptr) ) ? \
			( (dir) == 0 ? \
				( macroset ## SETLEFT( (baseptr), (valvar) ) ) : \
				( (dir) > 0 ? ( macroset ## SETRIGHT( (baseptr), (valvar) ) ) : \
					(on_badrange( (baseptr), (dir) )) ) ) : \
			(on_null( (baseptr) )) )
		/* dir==0 raises the left size, dir==1 raises the right side. */
	#define LIBANDRIA4_RBTREES_BUILDSINGLEROT( name,  macroset ) { \
		( name ## _bitup ) ( name ## _singlerotate )( (name) *base, int dir ) { \
			if( dir < 0 || dir > 1 || !base ) { \
				return( ( name ## _bitup_buildError )( LIBANDRIA4_RESULT_FAILURE_DOMAIN ) ); } \
			\
			( name ## _bitup ) res; \
			if( !dir ) { res = name ## _rotateleft( base ); } \
			else { res = name ## _rotateright( base ); } \
			(name) *a; libandria4_commonio_err e = 0; \
				LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
					res, \
						LIBANDRIA4_OP_RETres, \
						LIBANDRIA4_OP_SETa, \
						LIBANDRIA4_OP_SETeTO1 ); \
					if( e ) { \
						return( ( name ## _bitup_buildError )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
			LIBANDRIA4_RBTREES_SETRED( macroset,  base ); \
			LIBANDRIA4_RBTREES_SETBLACK( macroset,  a ); \
			\
			return( res ); }
	
		/* dir==0 raises the left size, dir==1 raises the right side. */
	#define LIBANDRIA4_RBTREES_BUILDDOUBLEROT( name,  macroset )
		( name ## _bitup ) ( name ## _doublerotate )( (name) *base, int dir ) { \
			if( dir < 0 || dir > 1 || !base ) { \
				return( ( name ## _bitup_buildError )( LIBANDRIA4_RESULT_FAILURE_DOMAIN ) ); } \
			\
			( name ## _bitup ) res; \
			(name) *a = 0, *mid; libandria4_commonio_err e = 0; \
			\
			if( !dir ) { \
				res = macroset ## _GETRIGHT( head, nodetype, base ); \
					LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( res, \
							LIBANDRIA4_OP_RETres, LIBANDRIA4_OP_SETa, LIBANDRIA4_OP_SETeTO1 ); \
						if( e ) { \
							return( ( name ## _bitup_buildError )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
						mid = a; \
				res = name ## _doublerotateleft( base ); } \
			else { \
				res = macroset ## _GETLEFT( head, nodetype, base ); \
					LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( res, \
							LIBANDRIA4_OP_RETres, LIBANDRIA4_OP_SETa, LIBANDRIA4_OP_SETeTO1 ); \
						if( e ) { \
							return( ( name ## _bitup_buildError )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
						mid = a; \
				res = name ## _doublerotateright( base ); } \
			LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( res, \
					LIBANDRIA4_OP_RETres, LIBANDRIA4_OP_SETa, LIBANDRIA4_OP_SETeTO1 ); \
				if( e ) { \
					return( ( name ## _bitup_buildError )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
			\
			LIBANDRIA4_RBTREES_SETRED( macroset,  mid ); \
			LIBANDRIA4_RBTREES_SETRED( macroset,  base ); \
			LIBANDRIA4_RBTREES_SETBLACK( macroset,  a ); \
			\
			return( res ); }
	#define LIBANDRIA4_RBTREES_BUILDBALANCE( name,  macroset ) \
		( name ## _eitherrnodptr ) ( name ## _insertrebalance )( (name) *base, int dir ) { \
			if( !base || ( dir != -1 && dir != 1 ) ) { \
				return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_DOMAIN ) ); } \
			\
			libandria4_commonio_err e = 0, d = 0; \
			(name) *a; ( name ## _bitup ) res; \
			libandria4_doubleint gcol; int ared, ired; \
			\
			/* Pathing. */ gcol = ( name ## _redchildren )( base ); \
			if( dir == -1 ) { \
				ared = gcol.left; ired = gcol.right; \
				res = macroset ## _GETLEFT( head, nodetype, base ); \
				LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
					res, \
						LIBANDRIA4_OP_SETe, \
						LIBANDRIA4_OP_SETa, \
						LIBANDRIA4_OP_SETd ); \
					if( e ) { return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); } \
					if( d ) { return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_BROKEN ) ); } } \
			else { \
				ared = gcol.right; ired = gcol.left; \
				res = macroset ## _GETRIGHT( head, nodetype, base ); \
				LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
					res, \
						LIBANDRIA4_OP_SETe, \
						LIBANDRIA4_OP_SETa, \
						LIBANDRIA4_OP_SETd ); \
					if( e ) { \
						return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); } \
					if( d ) { \
						return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_BROKEN ) ); } } \
			\
			gcol = ( name ## _redchildren )( a ); \
			if( ared && ired ) { /* Red-red case 1: both children red, any grandchild red. */ \
				if( gcol.left || gcol.right ) { \
					LIBANDRIA4_RBTREES_SETRED( macroset,  base ); \
					LIBANDRIA4_RBTREES_SETBLACK( macroset,  left ); \
					LIBANDRIA4_RBTREES_SETBLACK( macroset,  right ); } } \
			else if( ared && !ired ) { /* Red-red case 2 & 3: active child & grandchild red, inactive child black. */ \
				if( dir == -1 ? gcol.left : gcol.right ) { /* Red-red case 2: OUTER grandchild red. */ \
					res = ( name ## _singlerotate )( base, ( dir ? 0 : 1 ) ); \
						LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
							res, \
								LIBANDRIA4_OP_SETe, \
								LIBANDRIA4_OP_SETa, \
								LIBANDRIA4_OP_SETdTO1 ); \
							if( d ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_BROKEN ) ); } \
						base = a; \
							if( e ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); } } \
				else if( dir != -1 ? gcol.left : gcol.right ) { /* Red-red case 3: INNER grandchild red. */ \
					res = ( name ## _doublerotate )( base, ( dir ? 0 : 1 ) ); \
						LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
							res, \
								LIBANDRIA4_OP_SETe, \
								LIBANDRIA4_OP_SETa, \
								LIBANDRIA4_OP_SETdTO1 ); \
							if( d ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_BROKEN ) ); } \
						base = a; \
							if( e ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); } } } \
			\
			return( return( ( name ## _eitherrnodptr_nodeptr )( base ) ); ); }
	#define LIBANDRIA4_RBTREES_BUILDINNERINSERT( name,  macroset ) \
			/* addition must be set to red ahead of time! Not optional! Also, it's key MUST be set. */ \
		( name ## _eitherrnodptr ) ( name ## _innerinsert )( (name) *base,  (name) *addition ) { \
			if( !addition ) { \
				return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_DOMAIN ) ); } \
			if( !ret ) { return( ( name ## _eitherrnodptr_nodeptr )( addition ) ); } \
			\
				/* -1 if ret>addition, 0 if ret==addition, else 1. */ \
			int test = macroset ## _COMPAREn( base, addition ); (name) *tmp = 0; ( name ## _bitup ) res; \
			switch( test ) { \
				case -1: /* ( base>addition ) == ( addition<base ), so left case. */ \
					res = macroset ## _GETLEFT( head, nodetype, base ); break; \
				case 1: /* Right case. */ res = macroset ## _GETRIGHT( head, nodetype, base ); break; \
				case 0: return( ( name ## _eitherrnodptr_nodeptr )( base ) ); \
				default: return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_UNDIFFERENTIATED ) ); } \
			libandria4_commonio_err e = 0, d = 0; \
			LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
				res, \
					LIBANDRIA4_OP_SETe, \
					LIBANDRIA4_OP_SETtmp, \
					LIBANDRIA4_OP_SETd ); \
				if( e ) { return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); } \
				if( d ) { return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_BROKEN ) ); } \
			\
			( name ## _eitherrnodptr ) res2 = ( name ## _innerinsert )( tmp,  addition ); \
				LIBANDRIA4_MONAD_EITHER_BODYMATCH( res2, LIBANDRIA4_OP_SETe, LIBANDRIA4_OP_SETtmp ); \
				if( e ) { return( ( name ## _eitherrnodptr_err )( e ) ); } \
			\
			switch( test ) { \
				case -1: res = macroset ## _SETLEFT( base, tmp ); break; \
				case 1: res = macroset ## _SETRIGHT( base, tmp ); break; \
				default: /* Should never be reached. */ \
					return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
				/* Warning! As of this point, the 'ret' var itself should be absolutely unmodified! */\
			LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
				res, \
					LIBANDRIA4_OP_SETe, \
					LIBANDRIA4_NULL_MACRO, \
					LIBANDRIA4_OP_SETd ); \
				if( e ) { return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); } \
				if( d ) { return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_BROKEN ) ); } \
			\
			return( ( name ## _insertrebalance )( base, test ) ); }
	#define LIBANDRIA4_RBTREES_BUILDINSERT( name,  macroset ) \
			/* Will itself set addition to red. */ \
		( name ## _eitherrnodptr ) ( name ## _insert )( (name) **base,  (name) *addition ) { \
			if( !base || !addition ) { \
				return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_DOMAIN ) ); } \
			\
			LIBANDRIA4_RBTREES_SETRED( macroset,  addition ); \
			\
			(name) *tmp = 0; libandria4_commonio_err e = 0; \
			( name ## _eitherrnodptr ) res = ( name ## _innerinsert )( *base,  addition ); \
				LIBANDRIA4_MONAD_EITHER_BODYMATCH( res, LIBANDRIA4_OP_SETe, LIBANDRIA4_OP_SETtmp ); \
				if( e ) { return( ( name ## _eitherrnodptr_err )( e ) ); } \
				*base = tmp; \
			LIBANDRIA4_RBTREES_SETBLACK( macroset,  *base ); \
			\
			return( ( name ## _eitherrnodptr_nodeptr )( *base ) ); }
		/* This code will test/verify the entire tree. Returns the black height on success, else returns a negative. */
	#define LIBANDRIA4_RBTREES_ASSERT( name,  macroset ) \
		int ( name ## _rbassert )( (name) *base ) { \
			if( !base ) { /* Null ptr */ ; } \
			\
			(name) *left, *right, *a = 0; \
			( name ## _bitup ) res; \
			libandria4_commonio_err e = 0; \
			/* Fetch branches. */
			res = macroset ## _GETLEFT( head, nodetype, base ); \
			LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
				res, \
					LIBANDRIA4_OP_SETe, \
					LIBANDRIA4_OP_SETa, \
					??? ); \
				if( e ) { ??? } \
				left = a; \
			res = macroset ## _GETRIGHT( head, nodetype, base ); \
			LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
				res, \
					LIBANDRIA4_OP_SETe, \
					LIBANDRIA4_OP_SETa, \
					??? ); \
				if( e ) { ??? } \
				right = a; \
			/* Check red violations. */ \
			int isred = LIBANDRIA4_RBTREES_ISRED( base ); \
			if( isred ) { \
				if( LIBANDRIA4_RBTREES_ISRED( left ) || LIBANDRIA4_RBTREES_ISRED( right ) ) { \
					return( red violation ); } } \
			/* Check sort order. */ \
			if ( \
				( left && BADORDER( left, base ) ) || \
				( right && BADORDER( base, right ) ) ) { \
				return( sort violation ); } \
			/* Check balance. */ \
			int left_a = ( name ## _rbassert )( left ); \
			int right_a = ( name ## _rbassert )( left ); \
			if( left_a != 0 && right_a != 0 && left_a != right_a ) { \
				return( height mismatch ); } \
			/* Count black (and only black) nodes. */ \
			if( left_a != 0 && right_a != 0 ) { \
				return( LIBANDRIA4_RBTREES_ISRED( base ) ? left_a : left_a + 1 ); } \
			\
			else { return( 0 ); } }
	
	
	
	
	
	
	
	
	;
	libandria4_doubleint doublefetch( (name) *base, int dir,  (name) **target, (name) **offside ) { \
		if( !base ) { \
			return( ( libandria4_doubleint_build )( \
				LIBANDRIA4_RESULT_FAILURE_DOMAIN, LIBANDRIA4_RESULT_FAILURE_DOMAIN ) ); } \
		/
		( name ## _bitup ) res; /
		(name) *tmp; /
		libandria4_commonio_err e = 0; /
		int a = LIBANDRIA4_RESULT_FAILURE_NOTINITIALIZED, /
			b = LIBANDRIA4_RESULT_FAILURE_NOTINITIALIZED; /
		/
		if( target ) { \
			if( !dir ) { \
				res = macroset ## _GETLEFT( head, nodetype, base ); } \
			else { \
				res = macroset ## _GETRIGHT( head, nodetype, base ); } \
			LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( res, \
					LIBANDRIA4_OP_SETa, LIBANDRIA4_OP_SETtmp, LIBANDRIA4_OP_SETeTO1 ); \
				if( e ) { a = LIBANDRIA4_RESULT_FAILURE_LOGICFAULT; } \
				else { *target = tmp; \
					a = LIBANDRIA4_RESULT_GENERICTRUE; } } \
		else { a = LIBANDRIA4_RESULT_FAILURE_DOMAIN; } \
		\
		if( offside ) { \
			if( dir ) { \
				res = macroset ## _GETLEFT( head, nodetype, base ); } \
			else { \
				res = macroset ## _GETRIGHT( head, nodetype, base ); } \
			LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( res, \
					LIBANDRIA4_OP_SETb, LIBANDRIA4_OP_SETtmp, LIBANDRIA4_OP_SETeTO1 ); \
				if( e ) { b = LIBANDRIA4_RESULT_FAILURE_LOGICFAULT; } \
				else { *offside = tmp; \
					b = LIBANDRIA4_RESULT_GENERICTRUE; } } \
		else { b = LIBANDRIA4_RESULT_FAILURE_DOMAIN; } \
		\
		return( ( libandria4_doubleint_build )( a, b ) ); }
	( name ## _eitherrnodptr ) ( name ## _delete )( (name) **base,  (keytype) *targkey )
	{
		if( !base || !targkey ) {
			return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_DOMAIN ) ); }
		
		(name) *tmp = 0;
		libandria4_commonio_err e = 0;
		( name ## _eitherrnodptr ) res = ( name ## _innerdelete )( *base,  targkey );
			LIBANDRIA4_MONAD_EITHER_BODYMATCH( res, LIBANDRIA4_OP_SETe, LIBANDRIA4_OP_SETtmp );
			if( e ) { return( ( name ## _eitherrnodptr_err )( e ) ); }
			*base = tmp;
		LIBANDRIA4_RBTREES_SETBLACK( macroset,  *base );
		
		return( ( name ## _eitherrnodptr_nodeptr )( *base ) );
	}
	
	( name ## _eitherrnodptr ) ( name ## _innerdelete )( (name) **base,  (keytype) *targkey )
	{
		/* Note: _FETCHCHILD() returns a bi-tuplic, but lets ignore that for now. */
		
			/* So the while can become a do-while. */
		if( !base || !targkey )
		{
			return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_DOMAIN ) );
		}
		
		( name ## _bitup ) res;
		libandria4_doubleint di;
		
		(name) *tmp = 0, *ret = 0, *active, *inactive;
		
		(name) *foc, *par, *gran;
		(name) *pfod, *fod;
		
		int dir = 1, dir2, dir3, prev = 1, last = 1, pdir;
		libandria4_commonio_err d = 0, e = 0;
		
		/* Setup helpers. */
		gran = par = pfod = fod = 0;
		foc = 0;
		
			/* Search for, and push down, a red color. */
		do
		{
			if( !foc )
			{
				foc = *base;
				
			} else {
				
				last = prev;
				prev = dir;
				
				/* Update helpers. */
				gran = par;
				par = foc;
				res = LIBANDRIA4_RBTREES_FETCHCHILD( head, nodetype, macroset,  foc, dir, ??? on_badrange, LIBANDRIA4_NULL_MACRO );
					LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
						res, \
							LIBANDRIA4_OP_SETd, \
							LIBANDRIA4_OP_SETtmp, \
							LIBANDRIA4_OP_SETeTO1 ); \
						if( e ) { \
							return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
						if( d ) { \
							return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); }
					foc = tmp;
			}
			dir = ( macroset ## _COMPAREk( foc, *targkey ) ? 1 : 0 );
			
			/* Save found node. */
			if( dir = macroset ## _COMPAREk( foc, *targkey ) == 0 )
			{
				fod = foc;
				pfod = par;
				pdir = prev;
			}
			
			
				/* active = foc->link[ dir ]; */
			di = doublefetch( foc, dir,  &active, &inactive );
			if( di.left != LIBANDRIA4_RESULT_GENERICTRUE || di.right != LIBANDRIA4_RESULT_GENERICTRUE )
			{
				return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_UNDIFFERENTIATED ) );
			}
			
			
			/* Push the red node down. */
			if
			(
				!LIBANDRIA4_RBTREES_ISRED( macroset,  foc ) &&
				!LIBANDRIA4_RBTREES_ISRED( macroset,  active )
			)
			{
				if( LIBANDRIA4_RBTREES_ISRED( macroset,  inactive ) )
				{
					/* p = p->link[last] = jsw_single(q, dir); */
					
					res = ( name ## _singlerotate )( foc, dir );
						LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
							res, \
								LIBANDRIA4_OP_SETdTO1, \
								LIBANDRIA4_OP_SETtmp, \
								LIBANDRIA4_OP_SETdTO2 ); \
							if( d == 2 ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
							/* This will replace " *focus = tmp; " */
						if( par )
						{
							res = LIBANDRIA4_RBTREES_SETCHILD( par, prev,  tmp,  ??? on_badrange, LIBANDRIA4_NULL_MACRO );
								LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
									res, \
										LIBANDRIA4_OP_SETeTO1, \
										??? ignore , \
										LIBANDRIA4_OP_SETeTO2 ); \
									if( e == 2 ) { \
										return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
									if( e == 1 ) { \
										return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); }
							
						} else {
							
							*base = tmp; /* Special-casing. */
						}
							/* Redirect parent, so that grandparent stays in-sync. */
						par = tmp; \
							if( d == 1 ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); }
				}
				else if( par && !LIBANDRIA4_RBTREES_ISRED( macroset,  inactive ) )
				{
					/* The nested if() would fail without a parent either way, so checking parent against null is fine. */
					
					(name) *sib;
					res = LIBANDRIA4_RBTREES_FETCHCHILD( head, nodetype, macroset,  par, !prev, ??? on_badrange, LIBANDRIA4_NULL_MACRO );
						LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
							res, \
								LIBANDRIA4_OP_SETd, \
								LIBANDRIA4_OP_SETtmp, \
								LIBANDRIA4_OP_SETeTO1 ); \
							if( e ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
							if( d ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); }
							sib = tmp;
					(name) *nephew, *neice;
						/* nephew = sib->link[ !prev ] */
					di = doublefetch( sib, prev,  &nephew, &neice );
						if( di.left != LIBANDRIA4_RESULT_GENERICTRUE || di.right != LIBANDRIA4_RESULT_GENERICTRUE )
						{
							return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_UNDIFFERENTIATED ) );
						}
					
					if( sib )
					{
						if
						(
							!LIBANDRIA4_RBTREES_ISRED( macroset,  nephew ) &&
							!LIBANDRIA4_RBTREES_ISRED( macroset,  neice )
						)
						{
							/* Color flip. */
							LIBANDRIA4_RBTREES_SETBLACK( macroset,  par );
							LIBANDRIA4_RBTREES_SETRED( macroset,  sib );
							LIBANDRIA4_RBTREES_SETRED( macroset,  foc );
							
						} else {
							
							dir2 = last /* ( gran->link[ 1 ] == par ) */;
							
							if( LIBANDRIA4_RBTREES_ISRED( macroset,  neice ) )
							{
								res = ( name ## _doublerotate )( par, prev );
								
							} else if( LIBANDRIA4_RBTREES_ISRED( macroset,  nephew ) )
							{
								res = ( name ## _singlerotate )( par, prev );
							}
							LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
								res, \
									LIBANDRIA4_OP_SETdTO2, \
									LIBANDRIA4_OP_SETtmp, \
									LIBANDRIA4_OP_SETdTO1 ); \
								if( d == 1 ) { \
									return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
								/* &( gran->link[last] ) == parent; *parent = tmp; */
							res = LIBANDRIA4_RBTREES_SETCHILD( gran, last,  tmp,  ??? on_badrange, LIBANDRIA4_NULL_MACRO ); \
									LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
										res, \
											LIBANDRIA4_OP_SETeTO2, \
											??? ignore , \
											LIBANDRIA4_OP_SETeTO1 ); \
										if( e == 1 ) { \
											return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
										else if( e == 2 ) { \
											return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); }
								if( d == 2 ) { \
									return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); } \
							
							/* Get pointers for both children of the new *parent. */
							di = doublefetch( tmp, prev,  &nephew, &neice );
								if( di.left != LIBANDRIA4_RESULT_GENERICTRUE || di.right != LIBANDRIA4_RESULT_GENERICTRUE )
								{
									return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_UNDIFFERENTIATED ) );
								}
							
							/* Ensure correct coloring. The grandparent will */
							/*  be fine without correction, and it's value */
							/*  will be just discarded on the next */
							/*  iteration. */
							LIBANDRIA4_RBTREES_SETRED( macroset,  foc );
							LIBANDRIA4_RBTREES_SETRED( macroset,  tmp );
							LIBANDRIA4_RBTREES_SETBLACK( macroset,  nephew );
							LIBANDRIA4_RBTREES_SETBLACK( macroset,  neice );
							
							/* ??? Do we have a valid set of helper values? Do par and prev need new values? */
						}
					}
				}
			}
			
		} while( foc && active );
		
		if( fod )
		{
			/* Unlike the EternallyConfuzzled version, we really ARE swapping the nodes. */
			ret = fod;
			(name) *t2 = 0, *t3 = 0;
			
				/* t2 = ret->link[ 0 ]; */
			di = doublefetch( ret, 0,  &t2, &t3 );
			if( di.left != LIBANDRIA4_RESULT_GENERICTRUE || di.right != LIBANDRIA4_RESULT_GENERICTRUE )
			{
				return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_UNDIFFERENTIATED ) );
			}
			
			/* Calculate directions. */
			(name) *fclink[ 2 ];
				/* fclink[ 0 ] = foc->link[ 0 ]; */
			di = doublefetch( foc, 0,  &( fclink[ 0 ] ), &( fclink[ 1 ] ) );
				if( di.left != LIBANDRIA4_RESULT_GENERICTRUE || di.right != LIBANDRIA4_RESULT_GENERICTRUE )
				{
					return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_UNDIFFERENTIATED ) );
				}
			if( fclink[ 0 ] && fclink[ 1 ] )
			{
				return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_OVERFLOW ) );
			}
			dir2 = !( fclink[ 0 ] );
			
			/* Relink, the found node will be replaced by the focus node, and the focus node */
			/*  will be replaced by it's (possible) solitary child. The focus node will */
			/*  adopt the children of the found node.*/
				tmp = foc;
				if( pfod )
				{
					res = LIBANDRIA4_RBTREES_SETCHILD( pfod, pdir,  foc,  ??? on_badrange, LIBANDRIA4_NULL_MACRO );
						LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
							res, \
								LIBANDRIA4_OP_SETeTO2, \
								LIBANDRIA4_NULL_MACRO, \
								LIBANDRIA4_OP_SETeTO1 ); \
							if( e == 1 ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
							else if( e == 2 ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); }
					
				} else {
					
					*base = foc;
				}
					/* Note that par might == pfod, or be a child of pfod. */
				if( par )
				{
					res = LIBANDRIA4_RBTREES_SETCHILD( par, prev,  fclink[ dir2 ],  ??? on_badrange, LIBANDRIA4_NULL_MACRO );
						LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
							res, \
								LIBANDRIA4_OP_SETeTO2, \
								LIBANDRIA4_NULL_MACRO, \
								LIBANDRIA4_OP_SETeTO1 ); \
							if( e == 1 ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
							else if( e == 2 ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); }
					
				} else {
					
					*base = fclink[ dir2 ];
				}
				/* If "focus" was a child of "found", then preserve the child of focus and */
				/*  avoid an infinite loop via the same action. */
					t2 = ( t2 == foc ? fclink[ dir2 ] : t2 );
					t3 = ( t3 == foc ? fclink[ dir2 ] : t3 );
				/* Set focus's children. */
					res = LIBANDRIA4_RBTREES_SETCHILD( foc, 0,  t2,  ??? on_badrange, LIBANDRIA4_NULL_MACRO );
						LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
							res, \
								LIBANDRIA4_OP_SETeTO2, \
								LIBANDRIA4_NULL_MACRO, \
								LIBANDRIA4_OP_SETeTO1 ); \
							if( e == 1 ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
							else if( e == 2 ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); }
					res = LIBANDRIA4_RBTREES_SETCHILD( foc, 1,  t3,  ??? on_badrange, LIBANDRIA4_NULL_MACRO );
						LIBANDRIA4_MONAD_BITUPLIC_BODYMATCH( \
							res, \
								LIBANDRIA4_OP_SETeTO2, \
								??? ignore , \
								LIBANDRIA4_OP_SETeTO1 ); \
							if( e == 1 ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_LOGICFAULT ) ); } \
							else if( e == 2 ) { \
								return( ( name ## _eitherrnodptr_err )( LIBANDRIA4_RESULT_FAILURE_RANGE ) ); }
			
			/* Preserve coloring. */
			if( pfod != par )
			{
				/* Recolor, since we swapped node locations instead of just data. */
				if( LIBANDRIA4_RBTREES_ISRED( macroset,  ret ) )
				{
					LIBANDRIA4_RBTREES_SETRED( macroset,  foc );
					
				} else {
					
					LIBANDRIA4_RBTREES_SETBLACK( macroset,  foc );
				}
				
			}
			/* I BELIEVE that no recoloring is needed if found == focus. */
			
			/* Instead of free()ing like Eternally Confuzzled, we'll be returning the node for external disposal. */
		}
		
		/* Root has intrinsicly been updated, so now color black. */
		if( *base )
		{
			LIBANDRIA4_RBTREES_SETBLACK( macroset,  *base );
		}
		
			/* Note: *ret has been removed from the tree hierarchy, so it MUST be somehow returned. */
		return( ( name ## _eitherrnodptr_nodeptr )( ret ) );
	}
	/* jsw_single(focus, dir): the dir side (0==left,1==right) becomes taller */
	/* jsw_double(parent, prev): same dir/height rule as single() */
	;






#include "math/heapsalgo.h"


typedef int testtype;
		/* These should have identical contents, they'll be used to test the */
		/*  relevant task, with the deletion nested inside the insertion. */
static testtype
	loads[ 30 ] =
		{
			 1,  2,  3,  4,  5,    6,  7,  8,  9, 10,
			11, 12, 13, 14, 15,   16, 17, 18, 19, 20,
			21, 22, 23, 24, 25,   26, 27, 28, 29, 30
		},
	dels[ 30 ] =
		{
			 1,  2,  3,  4,  5,    6,  7,  8,  9, 10,
			11, 12, 13, 14, 15,   16, 17, 18, 19, 20,
			21, 22, 23, 24, 25,   26, 27, 28, 29, 30
		};

typedef struct nodetype nodetype;
struct nodetype
{
	nodetype *left, *right;
	testtype key;
	int isred;
};
nodetype *testtree;


/* Build the tree stuff. */
???


LIBANDRIA4_HEAPSPERMUTATOR_BUILDINNER( intarr_permutate, testtype )
LIBANDRIA4_HEAPSPERMUTATOR_BUILD( intarr_permutate, testtype )

int intarr_permutate( size_t argn, testtype *argv,  void *data, void (*viewer)( void*,  size_t, testtype* ) );


void loadtree( void*,  size_t, testtype* );
void cleartree( void*,  size_t, testtype* );

int main( int argn, char *argc[] )
{
	printf( "\n\nLibAndria4 : Binary tree : Red-Black tree : Basic test program starting." );
	
	int res =
		intarr_permutate
		(
			sizeof( loads ) / sizeof( loads[ 0 ] ), loads,
			(void*)0, &loadtree
		);
	
	
	??? ;
	
	
	printf( "\n\nLibAndria4 : Binary tree : Red-Black tree : Basic test program done. Exiting.\n" );
	return( ??? );
}

void loadtree( void *ign,  size_t len, testtype *load )
{
	if( !len != !load )
	{
		printf( "\n\n> loadtree() received a mis-matched pair of arguments:" );
		printf( "\n>> len( %zu ), address( %p ).", len, (void*)load );
	}
	
	if( len && load )
	{
		size_t off;
		int res;
		
		/* List the current sequence. */
		printf( "\n\n> loadtree() received the following sequence of numbers:" );
		off = 0;
		while( off < len )
		{
			if( off == 0 )
			{
				printf( "\n>> %i", (int)( load[ off ] ) );
				
			} else if( off % 5 )
			{
				printf( ", %i", (int)( load[ off ] ) );
				
			} else {
				
				printf( ",\n>> %i", (int)( load[ off ] ) );
			}
			
				/* Add to the tree. */
			??? testtree ??? load[ off ] ???
			
				/* This code will test/verify the entire tree. Returns the black height on success, else returns a negative. */
			res = ( name ## _rbassert )( testtree );
			if( !res )
			{
				printf( ??? );
				
				??? ;
			}
			
			++off;
		}
		
		???
		
		int res =
			intarr_permutate
			(
				sizeof( dels ) / sizeof( dels[ 0 ] ), dels,
				(void*)0, &cleartree
			);
		
		
		
		
		??? ;
		
	}
	
	return;
}
void cleartree( void *ign,  size_t len, testtype *del )
{
	??? ;
	
	return;
}
